name: Build, Push Docker Image & Deploy with Terraform

on:
    push:
        branches:
          - main
    pull_request:
      
permissions:
    id-token: write # This is required for aws oidc connection
    contents: read # This is required for actions/checkout
    pull-requests: write # This is required for gh bot to comment PR
    
jobs:
    deploy:
        name: Build and deploy container image
        runs-on: ubuntu-latest

        steps:
            # Checkout the repository
            - name: Checkout repository
              uses: actions/checkout@v3

            # Step 2: Log in to Docker Hub
            - name: Log in to Docker Hub
              uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

            # Step 3: Build and push Docker image
            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                context: ./code-base/website
                file: ./code-base/website/Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/my-ecs-demo-image:latest
             
            # Step 4: Configure AWS credentials
            - name: Configure AWS credentials from AWS account
              uses: aws-actions/configure-aws-credentials@v2
              with:
                role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
                aws-region: ${{ secrets.AWS_REGION }}
                role-session-name: GitHub-OIDC-TERRAFORM

            # Step 5: Set up Terraform
            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.8.5

            # Step 6: format check
            - name: Terraform fmt
              id: fmt
              run: terraform fmt -check
              working-directory: ./infrastructure
              continue-on-error: true

            # Step 7: Initialize Terraform
            - name: Terraform Init
              id: init
              env:
                AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
                AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
                AWS_REGION: ${{ secrets.AWS_REGION }}
              run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
              working-directory: ./infrastructure

            # Step 8: Validate Terraform configuration
            - name: Terraform Validate
              id: validate
              run: |
                terraform validate -no-color > validate.txt
                echo "stdout<<EOF" >> $GITHUB_OUTPUT
                cat validate.txt >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
              working-directory: ./infrastructure

            # Step 9: Plan Terraform deployment
            - name: Terraform Plan
              id: plan
              run: |
                terraform plan -no-color > plan.txt
                echo "stdout<<EOF" >> $GITHUB_OUTPUT
                cat plan.txt >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
              if: github.event_name == 'pull_request'
              working-directory: ./infrastructure
              continue-on-error: true

            # step 10: Comment PR with plan details
            - uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                    const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                    #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                    #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                    <details><summary>Validation Output</summary>

                    \`\`\`\n
                    ${{ steps.validate.outputs.stdout }}
                    \`\`\`

                    </details>

                    #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                    <details><summary>Show Plan</summary>

                    \`\`\`\n
                    ${process.env.PLAN}
                    \`\`\`

                    </details>

                    *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: output
                    })

            # Step 11: Fail if plan fails
            - name: Terraform Plan Status
              if: steps.plan.outcome == 'failure'
              run: exit 1

            # Step 12: Apply Terraform deployment
            - name: Terraform Apply
              if: github.ref == 'refs/heads/main' && github.event_name == 'push'
              run: terraform apply -auto-approve -input=false
              working-directory: ./infrastructure
                


